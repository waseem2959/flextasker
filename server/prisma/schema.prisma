// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Main data models

model User {
  id             String     @id @default(uuid())
  email          String     @unique
  passwordHash   String
  password       String?    // Added for auth service compatibility
  firstName      String
  lastName       String
  name           String?    // Added for user service compatibility
  role           String     // Using UserRole enum from shared types
  averageRating  Float?
  trustScore     Int?
  phoneVerified  Boolean    @default(false)
  emailVerified  Boolean    @default(false)
  phone          String?
  city           String?
  state          String?
  country        String?
  zipCode        String?    // Added for location service
  bio            String?
  avatar         String?
  profileImage   String?    // Added for profile service
  profilePicture String?    // Added for OAuth providers
  latitude       Float?     // Added for location service
  longitude      Float?     // Added for location service
  location       String?    // Added for location service
  balance        Float?     @default(0) // Added for payment service
  pendingBalance Float?     @default(0) // Added for payment service
  isActive       Boolean    @default(true) // Added for auth middleware
  status         String?    // Added for websockets
  lastActive     DateTime?  // Added for auth tracking
  isOnline       Boolean?   @default(false) // Added for websockets
  deviceTokens   String[]   @default([]) // Added for push notifications
  emailVerificationExpires DateTime? // Added for user service
  resetPasswordExpires     DateTime? // Added for user service
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  ownedTasks     Task[]     @relation("TaskOwner")
  assignedTasks  Task[]     @relation("TaskAssignee")
  completedTasks Task[]     @relation("TasksCompleted") // Keep only this one for completed tasks
  bids           Bid[]
  reviewsGiven   Review[]   @relation("ReviewGiver")
  reviewsReceived Review[]  @relation("ReviewReceiver")
  notifications  Notification[]
  messagesSent   Message[]  @relation("MessageSender")
  messagesReceived Message[] @relation("MessageReceiver")
  conversations  ConversationParticipant[]
  refreshTokens  RefreshToken[]
  verifications  Verification[]
  passwordResets PasswordReset[]
  payments       Payment[]
  paymentMethods PaymentMethod[]
  userDevices    UserDevice[]
  notificationPreferences NotificationPreference[]
  auditLogs      AuditLog[]
  oauthAccounts  OauthAccount[]
  contacts       Contact[]  @relation("UserContacts")
  contactedBy    Contact[]  @relation("ContactedUser")
  disputes       Dispute[]  // Added for admin service
  
  // Verification relations
  emailVerifications        EmailVerification[]
  phoneVerifications        PhoneVerification[]
  documentVerifications     DocumentVerification[]
  manualVerificationRequests ManualVerificationRequest[]

  // Token fields for legacy compatibility
  emailVerificationToken String?
  resetPasswordToken     String?
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  icon        String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  tasks       Task[]
}

model Task {
  id           String    @id @default(uuid())
  title        String
  description  String
  ownerId      String
  categoryId   String
  assigneeId   String?
  completedById  String? // For tracking who completed the task
  status       String    // Using TaskStatus enum from shared types
  priority     String    // Using TaskPriority enum from shared types
  budget       Float
  budgetType   String    // Using BudgetType enum from shared types
  isRemote     Boolean   @default(false)
  location     String?
  city         String?   // Added for location service
  state        String?   // Added for location service
  latitude     Float?
  longitude    Float?
  deadline     DateTime?
  dueDate      DateTime? // Added for task service compatibility
  completedAt  DateTime? // Added for task completion tracking
  cancelledAt  DateTime? // Added for task cancellation tracking
  paymentStatus String?  // Added for payment service
  tags         String[]  @default([])
  requirements String[]  @default([])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  owner        User      @relation("TaskOwner", fields: [ownerId], references: [id])
  assignee     User?     @relation("TaskAssignee", fields: [assigneeId], references: [id])
  completedBy  User?     @relation("TasksCompleted", fields: [completedById], references: [id])
  category     Category  @relation(fields: [categoryId], references: [id])
  bids         Bid[]
  reviews      Review[]
  attachments  Attachment[]
  payments     Payment[]
  disputes     Dispute[] // Added for admin service
}

model Bid {
  id          String    @id @default(uuid())
  taskId      String
  bidderId    String
  amount      Float
  description String
  message     String?
  timeline    String
  estimatedCompletionTime String?
  status      String    // Using BidStatus enum from shared types
  submittedAt DateTime  @default(now())
  createdAt   DateTime  @default(now()) // Added for bid service compatibility
  updatedAt   DateTime  @updatedAt

  // Relations
  task        Task      @relation(fields: [taskId], references: [id])
  bidder      User      @relation(fields: [bidderId], references: [id])
}

model Review {
  id          String    @id @default(uuid())
  taskId      String
  reviewerId  String
  revieweeId  String
  receiverId  String?   // Added for review service compatibility
  userId      String?   // Added for various service compatibility
  rating      Int
  communicationRating Int? // Added for trust score service
  qualityRating Int?    // Added for trust score service
  title       String?
  comment     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  task        Task      @relation(fields: [taskId], references: [id])
  reviewer    User      @relation("ReviewGiver", fields: [reviewerId], references: [id])
  reviewee    User      @relation("ReviewReceiver", fields: [revieweeId], references: [id])
}

model Notification {
  id        String    @id @default(uuid())
  userId    String
  type      String    // Using NotificationType enum from shared types
  title     String?   // Added for notification service
  message   String
  data      Json?     // Added for job processors (renamed from metadata for consistency)
  metadata  Json?     // Added for notification service
  relatedId String?
  isRead    Boolean   @default(false)
  read      Boolean   @default(false) // Added for notification service compatibility
  archived  Boolean   @default(false) // Added for scheduled tasks
  createdAt DateTime  @default(now())

  // Relations
  user      User      @relation(fields: [userId], references: [id])
}

model Message {
  id         String    @id @default(uuid())
  senderId   String
  receiverId String?   // Made optional for messaging service compatibility
  conversationId String? // Added for messaging service
  content    String
  messageType String?  // Added for messaging service
  fileUrl    String?   // Added for messaging service
  fileName   String?   // Added for messaging service
  fileType   String?   // Added for messaging service
  isRead     Boolean   @default(false)
  readAt     DateTime? // Added for messaging service
  createdAt  DateTime  @default(now())

  // Relations
  sender     User      @relation("MessageSender", fields: [senderId], references: [id])
  receiver   User?     @relation("MessageReceiver", fields: [receiverId], references: [id])
  conversation Conversation? @relation(fields: [conversationId], references: [id])
}

model Attachment {
  id          String    @id @default(uuid())
  taskId      String
  fileName    String
  fileUrl     String
  contentType String
  size        Int
  uploadedAt  DateTime  @default(now())

  // Relations
  task        Task      @relation(fields: [taskId], references: [id])
}

// Additional tables required by the services

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id])
}

model Verification {
  id        String   @id @default(uuid())
  userId    String
  type      String   // PHONE, EMAIL, etc.
  token     String   @unique
  code      String?
  status    String   @default("PENDING") // Added for admin service
  expiresAt DateTime
  verified  Boolean  @default(false)
  processedAt DateTime? // Added for admin service
  processedBy String?   // Added for admin service
  adminNotes  String?   // Added for admin service
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id])
}

model PasswordReset {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id])
}

model Payment {
  id            String   @id @default(uuid())
  taskId        String
  userId        String
  payerId       String   // Added for payment service
  amount        Float
  fees          Float    @default(0)
  platformFee   Float    @default(0) // Added for payment service
  processingFee Float    @default(0) // Added for payment service
  refundedAmount Float   @default(0) // Added for payment service
  status        String   // PENDING, COMPLETED, FAILED, REFUNDED
  direction     String?  // Added for admin service (IN, OUT)
  paymentMethod String?
  stripePaymentIntentId String?
  gatewayResponse Json?  // Added for payment service
  gatewayTransactionId String? // Added for payment service
  completedAt   DateTime? // Added for payment service
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  task          Task     @relation(fields: [taskId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
  refunds       Refund[]
  disputes      Dispute[] // Added for admin service
}

model Refund {
  id        String   @id @default(uuid())
  paymentId String
  amount    Float
  reason    String
  status    String   @default("PENDING")
  requestedById String? // Added for payment service
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  payment   Payment  @relation(fields: [paymentId], references: [id])
}

model Dispute {
  id          String   @id @default(uuid())
  taskId      String?
  paymentId   String?
  userId      String
  type        String   // PAYMENT, QUALITY, DELIVERY, etc.
  status      String   @default("PENDING") // PENDING, INVESTIGATING, RESOLVED, CLOSED
  subject     String
  description String
  resolution  String?
  resolvedBy  String?
  resolvedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id])
  task        Task?    @relation(fields: [taskId], references: [id])
  payment     Payment? @relation(fields: [paymentId], references: [id])
}

model PaymentMethod {
  id          String  @id @default(uuid())
  userId      String
  type        String  // CARD, BANK_ACCOUNT
  provider    String  // STRIPE, PAYPAL
  externalId  String  // Stripe payment method ID
  last4       String?
  brand       String?
  details     Json?   // Added for payment method data
  isDefault   Boolean @default(false)
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User    @relation(fields: [userId], references: [id])
}

model PlatformRevenue {
  id          String   @id @default(uuid())
  amount      Float
  source      String   // TASK_FEE, SUBSCRIPTION, etc.
  sourceId    String?  // Added for payment service (renamed from taskId for consistency)
  taskId      String?
  userId      String?
  description String?
  createdAt   DateTime @default(now())
}

model Conversation {
  id           String   @id @default(uuid())
  title        String?
  taskId       String?  // Added for messaging service
  isGroup      Boolean  @default(false) // Added for messaging service
  lastMessageAt DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  messages     Message[]
  participants ConversationParticipant[]
}

model ConversationParticipant {
  id             String   @id @default(uuid())
  conversationId String
  userId         String
  joinedAt       DateTime @default(now())
  leftAt         DateTime?

  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  user          User         @relation(fields: [userId], references: [id])

  @@unique([conversationId, userId])
}

model NotificationPreference {
  id              String  @id @default(uuid())
  userId          String  @unique
  email           Boolean @default(true)
  push            Boolean @default(true)
  sms             Boolean @default(false)
  taskUpdates     Boolean @default(true)
  bidUpdates      Boolean @default(true)
  reviewUpdates   Boolean @default(true)
  paymentUpdates  Boolean @default(true)
  marketingEmails Boolean @default(false)
  types           Json?   // Added for notification service
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User    @relation(fields: [userId], references: [id])
}

model UserDevice {
  id         String   @id @default(uuid())
  userId     String
  deviceId   String   @unique
  token      String
  platform   String   // IOS, ANDROID, WEB
  deviceInfo Json?    // Added for push notification service
  isActive   Boolean  @default(true)
  lastUsed   DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user       User     @relation(fields: [userId], references: [id])
}

model AuditLog {
  id         String   @id @default(uuid())
  userId     String?
  action     String
  entityType String
  entityId   String?
  resource   String?  // Added for audit log middleware
  targetId   String?  // Added for admin service
  details    String?  // Added for admin service
  oldData    Json?
  newData    Json?
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now()) // Added for audit utils
  createdAt  DateTime @default(now())

  // Relations
  user       User?    @relation(fields: [userId], references: [id])
}

model FeatureFlag {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  type        String?  // Added for feature flags utils
  enabled     Boolean  @default(false) // Added for feature flags utils
  isEnabled   Boolean  @default(false)
  rolloutPercentage Float @default(0)
  conditions  Json?
  rules       Json?    // Added for feature flags utils
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Export {
  id         String   @id @default(uuid())
  userId     String
  type       String   // USER_DATA, TASKS, PAYMENTS
  dataType   String?  // Added for job processors
  status     String   @default("PENDING")
  fileUrl    String?
  filePath   String?  // Added for job processors
  requestedAt DateTime @default(now())
  completedAt DateTime?
  expiresAt   DateTime?
}

model OauthAccount {
  id           String @id @default(uuid())
  userId       String
  provider     String // GOOGLE, FACEBOOK, GITHUB
  providerId   String
  providerUserId String? // Added for OAuth providers
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user         User   @relation(fields: [userId], references: [id])

  @@unique([provider, providerId])
  @@unique([provider, providerUserId])
}

model File {
  id          String   @id @default(uuid())
  filename    String
  originalName String
  mimetype    String
  size        Int
  path        String
  url         String?
  uploadedBy  String?
  processed   Boolean  @default(false)
  processingMetadata Json? // Added for job processors
  processingError String? // Added for job processors
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Token {
  id        String   @id @default(uuid())
  type      String   // ACCESS, REFRESH, VERIFICATION
  token     String   @unique
  userId    String?
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Contact {
  id         String   @id @default(uuid())
  userId     String
  contactId  String
  contactUserId String? // Added for user handlers compatibility
  status     String   @default("PENDING") // PENDING, ACCEPTED, BLOCKED
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user       User     @relation("UserContacts", fields: [userId], references: [id])
  contact    User     @relation("ContactedUser", fields: [contactId], references: [id])

  @@unique([userId, contactId])
}

// Verification-related models

model EmailVerification {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  email     String
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id])
}

model PhoneVerification {
  id          String   @id @default(uuid())
  userId      String
  code        String
  phone       String
  attempts    Int      @default(0)
  maxAttempts Int      @default(3)
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id])
}

model DocumentVerification {
  id           String    @id @default(uuid())
  userId       String
  type         String    // DocumentType: 'ID_DOCUMENT', 'ADDRESS_PROOF', 'BACKGROUND_CHECK'
  documentUrl  String
  notes        String?
  status       String    @default("PENDING") // DocumentVerificationStatus: 'PENDING', 'VERIFIED', 'REJECTED'
  submittedAt  DateTime  @default(now())
  processedAt  DateTime?
  processedBy  String?
  adminNotes   String?

  // Relations
  user         User      @relation(fields: [userId], references: [id])
}

model ManualVerificationRequest {
  id          String    @id @default(uuid())
  userId      String
  reason      String
  status      String    @default("PENDING") // 'PENDING', 'APPROVED', 'REJECTED'
  submittedAt DateTime  @default(now())
  processedAt DateTime?
  processedBy String?
  adminNotes  String?

  // Relations
  user        User      @relation(fields: [userId], references: [id])
}
