// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User roles enumeration - defines what type of user someone is
enum UserRole {
  USER      // Can post tasks and receive services
  TASKER    // Can complete tasks for others
  ADMIN     // Can manage the platform
}

// Task status workflow - tracks the lifecycle of each task
enum TaskStatus {
  OPEN        // Task is posted and accepting bids
  IN_PROGRESS // Task has been accepted and is being worked on
  COMPLETED   // Task is finished and awaiting final approval
  CANCELLED   // Task was cancelled by either party
  DISPUTED    // Task has issues that need admin resolution
}

// Bid status tracking - shows the current state of each bid
enum BidStatus {
  PENDING   // Bid submitted, awaiting response
  ACCEPTED  // Bid was accepted by task owner
  REJECTED  // Bid was declined
  WITHDRAWN // Tasker withdrew their bid
}

// Verification status for different user verification types
enum VerificationStatus {
  PENDING   // Verification submitted, awaiting approval
  VERIFIED  // Successfully verified
  REJECTED  // Verification failed
  EXPIRED   // Verification period expired
}

// Payment status for transactions
enum PaymentStatus {
  PENDING    // Payment initiated but not complete
  COMPLETED  // Payment successful
  FAILED     // Payment failed
  REFUNDED   // Payment was refunded
  DISPUTED   // Payment is under dispute
}

// Message status for real-time chat
enum MessageStatus {
  SENT      // Message sent successfully
  DELIVERED // Message delivered to recipient
  READ      // Message has been read
}

// Core User model - the foundation of our user system
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?  @unique
  avatar    String?  // URL to profile image
  bio       String?
  
  // User role and status
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  
  // Location data for proximity matching
  address   String?
  city      String?
  state     String?
  country   String?
  zipCode   String?
  latitude  Float?
  longitude Float?
  
  // Trust and reputation system
  trustScore     Float   @default(0.0)
  totalEarnings  Decimal @default(0.00)
  totalSpent     Decimal @default(0.00)
  
  // Verification status tracking
  emailVerified  Boolean @default(false)
  phoneVerified  Boolean @default(false)
  
  // Timestamps for tracking user lifecycle
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastActive DateTime @default(now())
  
  // Relationships - how users connect to other parts of the system
  
  // Tasks that this user has posted
  postedTasks Task[] @relation("TaskOwner")
  
  // Tasks this user is working on as a tasker
  assignedTasks Task[] @relation("TaskAssignee")
  
  // Bids this user has made on tasks
  bids Bid[]
  
  // Reviews this user has written
  reviewsGiven Review[] @relation("ReviewAuthor")
  
  // Reviews this user has received
  reviewsReceived Review[] @relation("ReviewSubject")
  
  // Verification records
  verifications Verification[]
  
  // Email verification tokens
  emailTokens EmailVerificationToken[]
  
  // Phone verification codes
  phoneTokens PhoneVerificationToken[]
  
  // Payment transactions
  payments Payment[]
  
  // Messages sent and received
  sentMessages Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  
  // Conversations this user participates in
  conversations ConversationParticipant[]
  
  // Notifications for this user
  notifications Notification[]

  @@map("users")
}

// Task categories for better organization and search
model Category {
  id          String @id @default(cuid())
  name        String @unique
  description String
  icon        String? // Icon identifier for UI
  isActive    Boolean @default(true)
  
  // Parent-child relationship for subcategories
  parentId String?
  parent   Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  
  // Tasks in this category
  tasks Task[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

// Core Task model - represents work to be done
model Task {
  id          String @id @default(cuid())
  title       String
  description String
  
  // Task organization and search
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  
  // Budget and pricing
  budget      Decimal
  budgetType  String @default("FIXED") // FIXED, HOURLY, NEGOTIABLE
  
  // Location information
  location    String?
  latitude    Float?
  longitude   Float?
  isRemote    Boolean @default(false)
  
  // Task lifecycle
  status      TaskStatus @default(OPEN)
  priority    String @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  
  // Timing
  deadline    DateTime?
  estimatedHours Float?
  startDate   DateTime?
  completionDate DateTime?
  
  // Relationships
  ownerId     String
  owner       User @relation("TaskOwner", fields: [ownerId], references: [id])
  
  assigneeId  String?
  assignee    User? @relation("TaskAssignee", fields: [assigneeId], references: [id])
  
  // Connected data
  bids        Bid[]
  reviews     Review[]
  payments    Payment[]
  attachments TaskAttachment[]
  
  // Metadata
  tags        String[] // Array of search tags
  requirements String[] // Array of skill requirements
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tasks")
}

// File attachments for tasks
model TaskAttachment {
  id       String @id @default(cuid())
  taskId   String
  task     Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  fileName    String
  fileUrl     String
  fileType    String
  fileSize    Int
  uploadedBy  String
  
  createdAt DateTime @default(now())

  @@map("task_attachments")
}

// Bid system - taskers making offers on tasks
model Bid {
  id          String    @id @default(cuid())
  taskId      String
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  bidderId    String
  bidder      User      @relation(fields: [bidderId], references: [id])
  
  // Bid details
  amount      Decimal
  description String
  timeline    String    // How long the work will take
  
  status      BidStatus @default(PENDING)
  
  // Timeline tracking
  submittedAt DateTime @default(now())
  respondedAt DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Ensure one bid per user per task
  @@unique([taskId, bidderId])
  @@map("bids")
}

// Review and rating system
model Review {
  id       String @id @default(cuid())
  
  // What's being reviewed
  taskId   String
  task     Task   @relation(fields: [taskId], references: [id])
  
  // Who wrote the review
  authorId String
  author   User   @relation("ReviewAuthor", fields: [authorId], references: [id])
  
  // Who is being reviewed
  subjectId String
  subject   User   @relation("ReviewSubject", fields: [subjectId], references: [id])
  
  // Review content
  rating      Int    // 1-5 stars
  title       String
  comment     String
  
  // Review categories for detailed feedback
  communicationRating Int?
  qualityRating      Int?
  timelinessRating   Int?
  
  // Helpful votes from other users
  helpfulVotes Int @default(0)
  
  // Status
  isPublic Boolean @default(true)
  isVerified Boolean @default(false) // Admin verified review
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // One review per author per task
  @@unique([taskId, authorId])
  @@map("reviews")
}

// Identity verification system
model Verification {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])
  
  type   String // ID_DOCUMENT, ADDRESS_PROOF, BACKGROUND_CHECK
  status VerificationStatus @default(PENDING)
  
  // Verification data
  documentType String?
  documentUrl  String?
  notes        String?
  
  // Admin review
  reviewedBy   String?
  reviewedAt   DateTime?
  rejectionReason String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("verifications")
}

// Email verification tokens
model EmailVerificationToken {
  id      String @id @default(cuid())
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  token   String @unique
  email   String // The email being verified
  
  createdAt DateTime @default(now())
  expiresAt DateTime
  
  @@map("email_verification_tokens")
}

// Phone verification codes
model PhoneVerificationToken {
  id      String @id @default(cuid())
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  code    String
  phone   String // The phone number being verified
  
  attempts Int @default(0)
  maxAttempts Int @default(3)
  
  createdAt DateTime @default(now())
  expiresAt DateTime
  
  @@map("phone_verification_tokens")
}

// Payment system
model Payment {
  id       String @id @default(cuid())
  
  taskId   String
  task     Task   @relation(fields: [taskId], references: [id])
  
  payerId  String
  payer    User   @relation(fields: [payerId], references: [id])
  
  amount   Decimal
  status   PaymentStatus @default(PENDING)
  
  // Payment gateway information
  gatewayTransactionId String?
  gatewayResponse      Json?   // Store gateway response data
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  completedAt DateTime?

  @@map("payments")
}

// Real-time messaging system
model Conversation {
  id        String @id @default(cuid())
  
  // Optional task context
  taskId    String?
  
  // Conversation metadata
  title     String?
  isGroup   Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Participants and messages
  participants ConversationParticipant[]
  messages     Message[]

  @@map("conversations")
}

// Who's in each conversation
model ConversationParticipant {
  id             String @id @default(cuid())
  
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  userId         String
  user           User @relation(fields: [userId], references: [id])
  
  // Participant status
  isActive       Boolean @default(true)
  joinedAt       DateTime @default(now())
  lastReadAt     DateTime @default(now())
  
  @@unique([conversationId, userId])
  @@map("conversation_participants")
}

// Individual messages within conversations
model Message {
  id             String @id @default(cuid())
  
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  senderId       String
  sender         User @relation("MessageSender", fields: [senderId], references: [id])
  
  receiverId     String?
  receiver       User? @relation("MessageReceiver", fields: [receiverId], references: [id])
  
  content        String
  messageType    String @default("TEXT") // TEXT, IMAGE, FILE, SYSTEM
  
  // File attachment info for non-text messages
  fileUrl        String?
  fileName       String?
  fileType       String?
  
  status         MessageStatus @default(SENT)
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("messages")
}

// Notification system
model Notification {
  id      String @id @default(cuid())
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type    String // BID_RECEIVED, TASK_COMPLETED, PAYMENT_RECEIVED, etc.
  title   String
  message String
  
  // Optional references to related objects
  taskId    String?
  bidId     String?
  reviewId  String?
  
  // Notification state
  isRead    Boolean @default(false)
  isEmailed Boolean @default(false)
  
  createdAt DateTime @default(now())

  @@map("notifications")
}

// Admin audit log for tracking system changes
model AuditLog {
  id        String @id @default(cuid())
  
  userId    String? // Admin who performed the action
  action    String  // LOGIN, UPDATE_USER, APPROVE_VERIFICATION, etc.
  resource  String  // USER, TASK, PAYMENT, etc.
  resourceId String?
  
  details   Json?   // Additional context about the action
  ipAddress String?
  userAgent String?
  
  createdAt DateTime @default(now())

  @@map("audit_logs")
}